<article class="chapter">
  <h1>Ember.js API Documentation</h1>
  <p>
    To get started exploring Ember, choose a version from the dropdown menu and a project (Ember or Ember Data). Ember has core methods used in any app, while Ember Data has documentation of the built-in library for making requests to a back end. If you're looking for documentation of the command line tool used to generate files, build your app, and more, visit ember-cli docs.
  </p>
  <h2>Commonly searched-for documentation</h2>
  <ul class="spec-method-list">
    <li>{{#link-to 'project-version.classes.class' 'EmberObject'}}EmberObject{{/link-to}} is the main base class for all Ember objects and includes the {{#link-to 'project-version.classes.class.methods.method' 'EmberObject' 'get' (query-params anchor='get')}}get{{/link-to}} and {{#link-to 'project-version.classes.class.methods.method' 'EmberObject' 'get' (query-params anchor='set')}}set{{/link-to}} methods</li>
    <li>{{#link-to 'project-version.classes.class' 'Component'}}Component{{/link-to}} a view that is completely isolated</li>
    <li>{{#link-to 'project-version.classes.class' 'Route'}}Route{{/link-to}} is used to define individual routes</li>
    <li>{{#link-to 'project-version.classes.class' 'Router'}}Router{{/link-to}} manages the application state and URLs</li>
    <li>{{#link-to 'project-version.classes.class' 'ComputedProperty'}}Computed Properties{{/link-to}} let you declare functions as properties</li>
    <li>{{#link-to 'project-version.classes.class' '@ember/object/computed'}}Computed Macros{{/link-to}} are shorter ways of expressing certain types of computed property</li>
    <li>{{#link-to 'project-version.classes.class' 'Helper'}}Helpers{{/link-to}} are functions that can compute values, and are used in templates</li>
    <li>{{#link-to 'project-version.classes.class' 'Controller'}}Controller{{/link-to}} a specialized type of Component that is rendered by the router when entering a Route</li>
    <li>{{#link-to 'project-version.classes.class' 'Service'}}Service{{/link-to}} an Ember object that lives for the duration of the application, and can be made available in different parts of your application</li>
  </ul>
  <h2>How to import and use packages</h2>
  <p>
    ECMAScript 2015 (also known as ES2015 or ES6) introduced a syntax for importing and exporting values from modules. Ember has made use of ES6 modules for quite a while now. However, the entire Ember framework was previously imported as a single package. Rather than importing specific parts of the framework directly, a very common pattern in Ember applications was to import this package as the Ember global object and subclass from there as needed:
  </p>
  <div class="highlight javascript">
    <div class="ribbon"></div>
    {{#code-block language='javascript' class="line-numbers"}}
      import Ember from 'ember';
      export default Ember.Component.extend({
            // ...
      });
    {{/code-block}}
  </div>
  <p>
    With the introduction of the Ember JavaScript Modules API, specific Ember modules may now be imported directly through the use of scoped packages. For example module import and exports can now look like this:
  </p>
  <div class="highlight javascript">
    <div class="ribbon"></div>
    {{#code-block language='javascript' class="line-numbers"}}
      import Component from '@ember/component';
      export default Component.extend({
            // ...
      });
    {{/code-block}}
  </div>
  <p>
    Making use of the JavaScript Modules API allows the building of smaller packages based on chunks of functionality and importing only parts of the Ember framework that are needed.
  </p>
  <p>
    The most up-to-date and complete mappings between the previous API and the new JavaScript Modules API can be found at the <a href='https://github.com/ember-cli/ember-rfc176-data'>ember-rfc176-data</a> repository.  <a href='https://github.com/tomdale/ember-modules-codemod'>Codemod tooling</a> is also available to help migrate existing Ember projects to the new JavaScript Modules API syntax.
  </p>
</article>
